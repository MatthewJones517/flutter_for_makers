// Mocks generated by Mockito 5.4.6 from annotations
// in flockinator/test/src/features/flock_scan/presentation/sorted_dashes_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:flockinator/src/features/flock_scan/application/flock_scan_service.dart'
    as _i3;
import 'package:flockinator/src/features/flock_scan/domain/dash_model.dart'
    as _i6;
import 'package:flockinator/src/features/flock_scan/domain/flock_scan_model.dart'
    as _i4;
import 'package:flockinator/src/shared/firebase/application/firebase_database_service.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:riverpod_annotation/riverpod_annotation.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAutoDisposeNotifierProviderRef_0<T> extends _i1.SmartFake
    implements _i2.AutoDisposeNotifierProviderRef<T> {
  _FakeAutoDisposeNotifierProviderRef_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(parent, parentInvocation);
}

class _FakeAutoDisposeAsyncNotifierProviderRef_1<T> extends _i1.SmartFake
    implements _i2.AutoDisposeAsyncNotifierProviderRef<T> {
  _FakeAutoDisposeAsyncNotifierProviderRef_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(parent, parentInvocation);
}

class _FakeAsyncValue_2<T> extends _i1.SmartFake implements _i2.AsyncValue<T> {
  _FakeAsyncValue_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [FlockScanService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlockScanService extends _i1.Mock implements _i3.FlockScanService {
  MockFlockScanService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get major =>
      (super.noSuchMethod(Invocation.getter(#major), returnValue: 0) as int);

  @override
  int get minor =>
      (super.noSuchMethod(Invocation.getter(#minor), returnValue: 0) as int);

  @override
  set major(int? _major) => super.noSuchMethod(
    Invocation.setter(#major, _major),
    returnValueForMissingStub: null,
  );

  @override
  set minor(int? _minor) => super.noSuchMethod(
    Invocation.setter(#minor, _minor),
    returnValueForMissingStub: null,
  );

  @override
  _i2.AutoDisposeNotifierProviderRef<_i4.FlockScanModel?> get ref =>
      (super.noSuchMethod(
            Invocation.getter(#ref),
            returnValue:
                _FakeAutoDisposeNotifierProviderRef_0<_i4.FlockScanModel?>(
                  this,
                  Invocation.getter(#ref),
                ),
          )
          as _i2.AutoDisposeNotifierProviderRef<_i4.FlockScanModel?>);

  @override
  set state(_i4.FlockScanModel? value) => super.noSuchMethod(
    Invocation.setter(#state, value),
    returnValueForMissingStub: null,
  );

  @override
  _i4.FlockScanModel? build({required int? major, required int? minor}) =>
      (super.noSuchMethod(
            Invocation.method(#build, [], {#major: major, #minor: minor}),
          )
          as _i4.FlockScanModel?);

  @override
  void listenSelf(
    void Function(_i4.FlockScanModel?, _i4.FlockScanModel?)? listener, {
    void Function(Object, StackTrace)? onError,
  }) => super.noSuchMethod(
    Invocation.method(#listenSelf, [listener], {#onError: onError}),
    returnValueForMissingStub: null,
  );

  @override
  bool updateShouldNotify(
    _i4.FlockScanModel? previous,
    _i4.FlockScanModel? next,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateShouldNotify, [previous, next]),
            returnValue: false,
          )
          as bool);
}

/// A class which mocks [FirebaseDatabaseService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseDatabaseService extends _i1.Mock
    implements _i5.FirebaseDatabaseService {
  MockFirebaseDatabaseService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AutoDisposeAsyncNotifierProviderRef<List<_i6.DashModel>> get ref =>
      (super.noSuchMethod(
            Invocation.getter(#ref),
            returnValue:
                _FakeAutoDisposeAsyncNotifierProviderRef_1<List<_i6.DashModel>>(
                  this,
                  Invocation.getter(#ref),
                ),
          )
          as _i2.AutoDisposeAsyncNotifierProviderRef<List<_i6.DashModel>>);

  @override
  _i2.AsyncValue<List<_i6.DashModel>> get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeAsyncValue_2<List<_i6.DashModel>>(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i2.AsyncValue<List<_i6.DashModel>>);

  @override
  _i7.Future<List<_i6.DashModel>> get future =>
      (super.noSuchMethod(
            Invocation.getter(#future),
            returnValue: _i7.Future<List<_i6.DashModel>>.value(
              <_i6.DashModel>[],
            ),
          )
          as _i7.Future<List<_i6.DashModel>>);

  @override
  set state(_i2.AsyncValue<List<_i6.DashModel>>? newState) =>
      super.noSuchMethod(
        Invocation.setter(#state, newState),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<List<_i6.DashModel>> build() =>
      (super.noSuchMethod(
            Invocation.method(#build, []),
            returnValue: _i7.Future<List<_i6.DashModel>>.value(
              <_i6.DashModel>[],
            ),
          )
          as _i7.Future<List<_i6.DashModel>>);

  @override
  void listenSelf(
    void Function(
      _i2.AsyncValue<List<_i6.DashModel>>?,
      _i2.AsyncValue<List<_i6.DashModel>>,
    )?
    listener, {
    void Function(Object, StackTrace)? onError,
  }) => super.noSuchMethod(
    Invocation.method(#listenSelf, [listener], {#onError: onError}),
    returnValueForMissingStub: null,
  );

  @override
  _i7.Future<List<_i6.DashModel>> update(
    _i7.FutureOr<List<_i6.DashModel>> Function(List<_i6.DashModel>)? cb, {
    _i7.FutureOr<List<_i6.DashModel>> Function(Object, StackTrace)? onError,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#update, [cb], {#onError: onError}),
            returnValue: _i7.Future<List<_i6.DashModel>>.value(
              <_i6.DashModel>[],
            ),
          )
          as _i7.Future<List<_i6.DashModel>>);

  @override
  bool updateShouldNotify(
    _i2.AsyncValue<List<_i6.DashModel>>? previous,
    _i2.AsyncValue<List<_i6.DashModel>>? next,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateShouldNotify, [previous, next]),
            returnValue: false,
          )
          as bool);
}
